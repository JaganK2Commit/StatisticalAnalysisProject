housing_data_model_leaps$which[housing_data_model_leaps_r2_index, ]
housing_data_model_leaps_best = lm(latestPrice ~ zipcode + propertyTaxRate + hasAssociation + yearBuilt + numPriceChanges              + numOfWaterfrontFeatures +  avgSchoolSize +
livingAreaSqFt + avgSchoolRating , data = housing_data_train )
summary(housing_data_model_leaps_best)
anova(housing_data_model, housing_data_model_leaps_best) # p-value is <2e-16 # Reject null hypothesis.
# leaps best model can be considered
housing_data_model_interaction = lm(latestPrice ~ (zipcode + propertyTaxRate + hasAssociation + yearBuilt +
numPriceChanges + numOfWaterfrontFeatures + avgSchoolSize + livingAreaSqFt + avgSchoolRating)^2, data = housing_data_train)
summary(housing_data_model_interaction)
length(coef(housing_data_model_interaction))## 56 predictors
summary(housing_data_model_interaction)$r.squared # 0.5899
summary(housing_data_model_interaction)$adj.r.squared # 0.5836
anova(housing_data_model, housing_data_model_interaction)[2,"Pr(>F)"]
# 2.438e-49
# Reject Null hypothesis
housing_data_model_interaction_aic = step(housing_data_model_interaction, direction = "backward", trace = 0)
extractAIC(housing_data_model_interaction_aic) # returns both p and AIC
housing_data_model_interaction_aic
# 31 predictors  72174
summary(housing_data_model_interaction_aic)$adj.r.squared
# [1] 0.5844
housing_data_model_interaction_bic = step(housing_data_model_interaction, direction = "backward", trace = 0, k = log(nrow(housing_data_numerical)))
extractAIC(housing_data_model_interaction_bic)  # returns both p and AIC
# 25  predictors 72189
summary(housing_data_model_interaction_bic)$adj.r.squared
# [1] 0.581
diagnostics = function (model){
#par(mfrow = c(1, 3))
plot(fitted(model), resid(model), pch = 20,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Fitted vs Residuals",
col = "grey")
abline(h = 0, lwd = 2, col = "orange")
qqnorm(resid(model), pch = 20, main = "QQNorm Plot",col = "grey")
qqline( resid(model),lwd = 2, col =  "orange")
hist(resid(model),main = "Histogram of Residuals",col = "orange",xlab = "Residuals",ylab = "Frequency")
library(lmtest)
bptest(model)
shapiro.test(resid(model))
}
diagnostics(housing_data_model_interaction_aic)
cooksd = cooks.distance(housing_data_model_interaction_aic)
plot(cooksd, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 1.5*mean(cooksd, na.rm=T), col="blue")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>1.5*mean(cooksd, na.rm=T),names(cooksd),""), col="black")  # add labels
housing_data_model_interaction_aic_without_outliers = lm(latestPrice ~ zipcode + propertyTaxRate + hasAssociation +
yearBuilt + numPriceChanges + numOfWaterfrontFeatures + avgSchoolSize +
livingAreaSqFt + avgSchoolRating + zipcode:numPriceChanges +
zipcode:numOfWaterfrontFeatures + zipcode:avgSchoolSize +
zipcode:livingAreaSqFt + propertyTaxRate:hasAssociation +
propertyTaxRate:yearBuilt + propertyTaxRate:avgSchoolSize +
propertyTaxRate:livingAreaSqFt + propertyTaxRate:avgSchoolRating +
hasAssociation:yearBuilt + hasAssociation:numPriceChanges +
hasAssociation:avgSchoolSize + hasAssociation:livingAreaSqFt +
yearBuilt:numOfWaterfrontFeatures + yearBuilt:avgSchoolSize +
yearBuilt:avgSchoolRating + numPriceChanges:livingAreaSqFt +
avgSchoolSize:livingAreaSqFt + avgSchoolSize:avgSchoolRating,  data = housing_data_train,  subset = cooksd < 2*mean(cooksd, na.rm=T))
diagnostics(housing_data_model_interaction_aic_without_outliers)
bptest(housing_data_model_interaction_aic_without_outliers)
library(MASS)
boxcox(housing_data_model_interaction_aic_without_outliers, plotit = TRUE, lambda = seq(0, 1, by = 0.05))
housing_data_model_interaction_aic_without_outliers = lm((((latestPrice ^ 0.43) -1)/0.45) ~ zipcode + propertyTaxRate + hasAssociation +
yearBuilt + numPriceChanges + numOfWaterfrontFeatures + avgSchoolSize +
livingAreaSqFt + avgSchoolRating + zipcode:numPriceChanges +
zipcode:numOfWaterfrontFeatures + zipcode:avgSchoolSize +
zipcode:livingAreaSqFt + propertyTaxRate:hasAssociation +
propertyTaxRate:yearBuilt + propertyTaxRate:avgSchoolSize +
propertyTaxRate:livingAreaSqFt + propertyTaxRate:avgSchoolRating +
hasAssociation:yearBuilt + hasAssociation:numPriceChanges +
hasAssociation:avgSchoolSize + hasAssociation:livingAreaSqFt +
yearBuilt:numOfWaterfrontFeatures + yearBuilt:avgSchoolSize +
yearBuilt:avgSchoolRating + numPriceChanges:livingAreaSqFt +
avgSchoolSize:livingAreaSqFt + avgSchoolSize:avgSchoolRating, data = houing_data_train,  subset = cooksd < 2*mean(cooksd, na.rm=T))
library(MASS)
boxcox(housing_data_model_interaction_aic_without_outliers, plotit = TRUE, lambda = seq(0, 1, by = 0.05))
housing_data_model_interaction_aic_without_outliers = lm((((latestPrice ^ 0.43) -1)/0.45) ~ zipcode + propertyTaxRate + hasAssociation +
yearBuilt + numPriceChanges + numOfWaterfrontFeatures + avgSchoolSize +
livingAreaSqFt + avgSchoolRating + zipcode:numPriceChanges +
zipcode:numOfWaterfrontFeatures + zipcode:avgSchoolSize +
zipcode:livingAreaSqFt + propertyTaxRate:hasAssociation +
propertyTaxRate:yearBuilt + propertyTaxRate:avgSchoolSize +
propertyTaxRate:livingAreaSqFt + propertyTaxRate:avgSchoolRating +
hasAssociation:yearBuilt + hasAssociation:numPriceChanges +
hasAssociation:avgSchoolSize + hasAssociation:livingAreaSqFt +
yearBuilt:numOfWaterfrontFeatures + yearBuilt:avgSchoolSize +
yearBuilt:avgSchoolRating + numPriceChanges:livingAreaSqFt +
avgSchoolSize:livingAreaSqFt + avgSchoolSize:avgSchoolRating, data = housing_data_train,  subset = cooksd < 2*mean(cooksd, na.rm=T))
diagnostics(housing_data_model_interaction_aic_without_outliers)
bptest(housing_data_model_interaction_aic_without_outliers)
raw_housing_data = read.csv("austinHousingData.csv")
# remove all rows with missing data
raw_housing_data = na.omit(raw_housing_data)
# Make homeType a factor variable
raw_housing_data$homeType = as.factor(raw_housing_data$homeType)
# Removed predictors that are not used.
selected_housing_data = subset(raw_housing_data, select = -c(zpid, latest_saledate, latestPriceSource,city, homeImage, streetAddress, numOfPhotos))
head(selected_housing_data)
summary(selected_housing_data)
dataVisuals = function(data) {
par(mfrow = c(2,3))
plot(latestPrice ~ homeType, data = data, pch = 20, col = "dodgerblue",main = "latestPrice vs. homeType", cex = 1.5)
plot(latestPrice ~ avgSchoolDistance  , data = data, pch = 20, col = "dodgerblue",main = "latestPrice vs. avgSchoolDistance  ", cex = 1.5)
plot(latestPrice ~ livingAreaSqFt, data = data, pch = 20, col = "dodgerblue",main = "latestPrice vs. livingAreaSqFt", cex = 1.5)
plot(latestPrice ~ lotSizeSqFt, data = data, pch = 20, col = "dodgerblue",main = "latestPrice vs. lotSizeSqFt", cex = 1.5)
plot(latestPrice ~ numOfBedrooms, data = data, pch = 20, col = "dodgerblue",main = "latestPrice vs. numOfBedrooms", cex = 1.5)
plot(latestPrice ~ numOfBathrooms, data = data, pch = 20, col = "dodgerblue",main = "latestPrice vs. numOfBathrooms", cex = 1.5)
}
dataVisuals(selected_housing_data)
for (x in c('homeType','latestPrice', 'avgSchoolDistance', 'livingAreaSqFt', 'lotSizeSqFt', 'numOfBedrooms', 'numOfBathrooms'))
{
value = selected_housing_data[,x][selected_housing_data[,x] %in% boxplot.stats(selected_housing_data[,x])$out]
selected_housing_data[,x][selected_housing_data[,x] %in% value] = NA
}
# remove all rows with missing data
selected_housing_data = na.omit(selected_housing_data)
dataVisuals(selected_housing_data)
#install.packages('ggmap')
library(ggmap)
library(ggplot2)
# register google maps API key
register_google(key = "AIzaSyAXuwivTHN6rIgi3teuusdz3r8dqNMQQx8")
## Central co-ordinates of the region we are interested in.
central_location = c(mean(selected_housing_data$longitude), mean(selected_housing_data$latitude))
## Get map
austin_map = ggmap(get_googlemap(center = central_location, scale = 1,zoom = 10), extent = "normal")
## Plot Mobility
austin_map + geom_point(
aes(x = selected_housing_data$longitude, y = selected_housing_data$latitude),
data = selected_housing_data,
col = "red",
alpha = 0.4,
size = 0.1
) + xlim(range(selected_housing_data$longitude)) + ylim(range(selected_housing_data$latitude))
set.seed(19870412)
ratio = 0.25
idx  = sample(nrow(selected_housing_data), size = nrow(selected_housing_data)* ratio)
housing_data_train = selected_housing_data[idx, ]
housing_data_test = selected_housing_data[-idx, ]
library(faraway)
options(max.print=1000000)
# This is a helper function to get the top n items from a matrix.
# Adjusted from https://stackoverflow.com/questions/32544566/find-the-largest-values-on-a-matrix-in-r
nlargest = function(m, n=10, sim = TRUE) {
mult = 1;
if (sim) mult = 2
res = order(m, decreasing = TRUE)[seq_len(n) * mult]
pos = arrayInd(res, dim(m), useNames = TRUE)
list(values = m[res],
position = pos)
}
# A correlation cannot be computed for factor variables.So we'll create a copy of
# the data frame without the factor variables to run the collinearity analysis
num_cols = unlist(lapply(housing_data_train, is.numeric))
housing_data_numerical = housing_data_train[ , num_cols]
# Pairs won't work with more than 26 variables
# pairs(housing_data_train[,1:26], col="dodgerblue")
# run cor() and store results on a matrix
(coll_matrix = round(cor(housing_data_numerical),2))
#garageSpaces is not always the same as parkingSpaces
spaces_different = housing_data_train$parkingSpaces != housing_data_train$garageSpaces
# Proportion of observations where parkingSpaces is different than garageSpaces
length(spaces_different[spaces_different==TRUE]) / length(spaces_different)
housing_data_train = subset(housing_data_train, select = -c(garageSpaces))
num_cols = unlist(lapply(housing_data_train, is.numeric))
housing_data_numerical = housing_data_train[ , num_cols]
coll_matrix = round(cor(housing_data_numerical),2)
library('faraway')
housing_data_model = lm(latestPrice ~ ., data = housing_data_train)
vif = vif(housing_data_model)
vif[which(vif > 5)]
summary(lm(hasGarage ~. -latestPrice, data = housing_data_train))$r.squared
housing_data_model_non_significant = lm(latestPrice ~ .-hasGarage, data = housing_data_train)
vif_non_significant = vif(housing_data_model_non_significant)
vif_non_significant[which(vif_non_significant > 5)]
#Finally, compare both models
(anova_results = anova(housing_data_model, housing_data_model_non_significant))
# As p-value is significant (0.94), we fail to reject and consider remove hasGarage predictor.
housing_data_train = subset(housing_data_train, select = -c(hasGarage))
housing_data_model = lm(latestPrice ~ ., data = housing_data_train)
length(coef(housing_data_model))
## 43 predictors
summary(housing_data_model)$r.squared # 0.5569
summary(housing_data_model)$adj.r.squared # 0.5509
# sqrt(mean((resid(housing_data_model) / (1 - hatvalues(housing_data_model))) ^ 2))
## Additive model AIC and BIC
housing_data_model_aic = step(housing_data_model, direction = "backward", trace = 0)
extractAIC(housing_data_model_aic) # returns both p and AIC
## 29 predictors
summary(housing_data_model_aic)$adj.r.squared
## [1] 0.5515
housing_data_model_bic = step(housing_data_model, direction = "backward", trace = 0, k = log(nrow(housing_data_numerical)))
extractAIC(housing_data_model_bic)  # returns both p and AIC
## 20 predictors
summary(housing_data_model_bic)$adj.r.squared
## [1] 0.5467
## Exhaustive Search
library(leaps)
housing_data_model_leaps = summary(regsubsets(latestPrice ~ ., data = housing_data_train))
housing_data_model_leaps$rss
housing_data_model_leaps$adjr2
housing_data_model_leaps_r2_index = which.max(housing_data_model_leaps$adjr2)  # 0.5167
housing_data_model_leaps$which[housing_data_model_leaps_r2_index, ]
housing_data_model_leaps_best = lm(latestPrice ~ zipcode + propertyTaxRate + hasAssociation + yearBuilt + numPriceChanges              + numOfWaterfrontFeatures +  avgSchoolSize +
livingAreaSqFt + avgSchoolRating , data = housing_data_train )
summary(housing_data_model_leaps_best)
anova(housing_data_model, housing_data_model_leaps_best) # p-value is <2e-16 # Reject null hypothesis.
# leaps best model can be considered
## Additive model AIC and BIC
housing_data_model_aic = step(housing_data_model, direction = "backward", trace = 0)
extractAIC(housing_data_model_aic) # returns both p and AIC
## 29 predictors
summary(housing_data_model_aic)$adj.r.squared
## [1] 0.5515
housing_data_model_bic = step(housing_data_model, direction = "backward", trace = 0, k = log(nrow(housing_data_numerical)))
extractAIC(housing_data_model_bic)  # returns both p and AIC
## 20 predictors
summary(housing_data_model_bic)$adj.r.squared
## [1] 0.5467
## Exhaustive Search
library(leaps)
housing_data_model_leaps = summary(regsubsets(latestPrice ~ ., data = housing_data_train))
housing_data_model_leaps$rss
housing_data_model_leaps$adjr2
housing_data_model_leaps_r2_index = which.max(housing_data_model_leaps$adjr2)  # 0.5167
housing_data_model_leaps$which[housing_data_model_leaps_r2_index, ]
housing_data_model_leaps_best = lm(latestPrice ~ zipcode + propertyTaxRate + hasAssociation + latest_saleyear + yearBuilt + numPriceChanges              + numOfWaterfrontFeatures +  avgSchoolSize +
livingAreaSqFt + avgSchoolRating , data = housing_data_train )
summary(housing_data_model_leaps_best)
anova(housing_data_model, housing_data_model_leaps_best) # p-value is <2e-16 # Reject null hypothesis.
# leaps best model can be considered
housing_data_model_interaction = lm(latestPrice ~ (zipcode + propertyTaxRate + hasAssociation + yearBuilt +
numPriceChanges + numOfWaterfrontFeatures + avgSchoolSize + livingAreaSqFt + avgSchoolRating)^2, data = housing_data_train)
summary(housing_data_model_interaction)
length(coef(housing_data_model_interaction))## 56 predictors
summary(housing_data_model_interaction)$r.squared # 0.5899
summary(housing_data_model_interaction)$adj.r.squared # 0.5836
anova(housing_data_model, housing_data_model_interaction)[2,"Pr(>F)"]
# 2.438e-49
# Reject Null hypothesis
housing_data_model_interaction = lm(latestPrice ~ (zipcode + propertyTaxRate + hasAssociation + yearBuilt +
numPriceChanges + numOfWaterfrontFeatures + avgSchoolSize + livingAreaSqFt + latest_saleyear avgSchoolRating)^2, data = housing_data_train)
housing_data_model_interaction = lm(latestPrice ~ (zipcode + propertyTaxRate + hasAssociation + yearBuilt +
numPriceChanges + numOfWaterfrontFeatures + avgSchoolSize + livingAreaSqFt + latest_saleyear + avgSchoolRating)^2, data = housing_data_train)
summary(housing_data_model_interaction)
length(coef(housing_data_model_interaction))## 56 predictors
summary(housing_data_model_interaction)$r.squared # 0.5899
summary(housing_data_model_interaction)$adj.r.squared # 0.5836
anova(housing_data_model, housing_data_model_interaction)[2,"Pr(>F)"]
# 2.438e-49
# Reject Null hypothesis
housing_data_model_interaction_aic = step(housing_data_model_interaction, direction = "backward", trace = 0)
extractAIC(housing_data_model_interaction_aic) # returns both p and AIC
housing_data_model_interaction_aic
# 31 predictors  72174
summary(housing_data_model_interaction_aic)$adj.r.squared
# [1] 0.5844
housing_data_model_interaction_bic = step(housing_data_model_interaction, direction = "backward", trace = 0, k = log(nrow(housing_data_numerical)))
extractAIC(housing_data_model_interaction_bic)  # returns both p and AIC
# 25  predictors 72189
summary(housing_data_model_interaction_bic)$adj.r.squared
# [1] 0.581
diagnostics = function (model){
par(mfrow = c(1, 3))
plot(fitted(model), resid(model), pch = 20,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Fitted vs Residuals",
col = "grey")
abline(h = 0, lwd = 2, col = "orange")
qqnorm(resid(model), pch = 20, main = "QQNorm Plot",col = "grey")
qqline( resid(model),lwd = 2, col =  "orange")
hist(resid(model),main = "Histogram of Residuals",col = "orange",xlab = "Residuals",ylab = "Frequency")
library(lmtest)
bptest(model)
shapiro.test(resid(model))
}
diagnostics(housing_data_model_interaction_aic)
cooksd = cooks.distance(housing_data_model_interaction_aic)
plot(cooksd, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 2*mean(cooksd, na.rm=T), col="black")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>2*mean(cooksd, na.rm=T),names(cooksd),""), col="red")  # add labels
housing_data_model_interaction_aic_without_outliers = lm(latestPrice ~ zipcode + propertyTaxRate + hasAssociation +
yearBuilt + numPriceChanges + numOfWaterfrontFeatures + avgSchoolSize +
livingAreaSqFt + latest_saleyear + avgSchoolRating + zipcode:numPriceChanges +
zipcode:numOfWaterfrontFeatures + zipcode:avgSchoolSize +
zipcode:livingAreaSqFt + propertyTaxRate:hasAssociation +
propertyTaxRate:yearBuilt + propertyTaxRate:avgSchoolSize +
propertyTaxRate:livingAreaSqFt + propertyTaxRate:avgSchoolRating +
hasAssociation:yearBuilt + hasAssociation:numPriceChanges +
hasAssociation:avgSchoolSize + hasAssociation:livingAreaSqFt +
hasAssociation:latest_saleyear + hasAssociation:avgSchoolRating +
yearBuilt:numOfWaterfrontFeatures + yearBuilt:avgSchoolSize +
yearBuilt:latest_saleyear + yearBuilt:avgSchoolRating + numPriceChanges:livingAreaSqFt +
numPriceChanges:latest_saleyear + avgSchoolSize:livingAreaSqFt +
avgSchoolSize:latest_saleyear + avgSchoolSize:avgSchoolRating +
livingAreaSqFt:avgSchoolRating,  data = housing_data_train,  subset = cooksd < 2*mean(cooksd, na.rm=T))
diagnostics(housing_data_model_interaction_aic_without_outliers)
bptest(housing_data_model_interaction_aic_without_outliers)
library(MASS)
boxcox(housing_data_model_interaction_aic_without_outliers, plotit = TRUE, lambda = seq(0, 1, by = 0.05))
housing_data_model_interaction_aic_without_outliers = lm((((latestPrice ^ 0.43) -1)/0.43) ~ zipcode + propertyTaxRate + hasAssociation +
yearBuilt + numPriceChanges + numOfWaterfrontFeatures + avgSchoolSize +
livingAreaSqFt + avgSchoolRating + zipcode:numPriceChanges +
zipcode:numOfWaterfrontFeatures + zipcode:avgSchoolSize +
zipcode:livingAreaSqFt + propertyTaxRate:hasAssociation +
propertyTaxRate:yearBuilt + propertyTaxRate:avgSchoolSize +
propertyTaxRate:livingAreaSqFt + propertyTaxRate:avgSchoolRating +
hasAssociation:yearBuilt + hasAssociation:numPriceChanges +
hasAssociation:avgSchoolSize + hasAssociation:livingAreaSqFt +
yearBuilt:numOfWaterfrontFeatures + yearBuilt:avgSchoolSize +
yearBuilt:avgSchoolRating + numPriceChanges:livingAreaSqFt +
avgSchoolSize:livingAreaSqFt + avgSchoolSize:avgSchoolRating, data = housing_data_train,  subset = cooksd < 2*mean(cooksd, na.rm=T))
diagnostics(housing_data_model_interaction_aic_without_outliers)
bptest(housing_data_model_interaction_aic_without_outliers)
options(scipen = 1, digits = 4, width = 80, fig.align = "center")
raw_housing_data = read.csv("austinHousingData.csv")
# remove all rows with missing data
raw_housing_data = na.omit(raw_housing_data)
# Make homeType a factor variable
raw_housing_data$homeType = as.factor(raw_housing_data$homeType)
# Removed predictors that are not used.
selected_housing_data = subset(raw_housing_data, select = -c(zpid, latest_saledate, latestPriceSource,city, homeImage, streetAddress, numOfPhotos))
head(selected_housing_data)
summary(selected_housing_data)
dataVisuals = function(data) {
par(mfrow = c(2,3))
plot(latestPrice ~ homeType, data = data, pch = 20, col = "dodgerblue",main = "latestPrice vs. homeType", cex = 1.5)
plot(latestPrice ~ avgSchoolDistance  , data = data, pch = 20, col = "dodgerblue",main = "latestPrice vs. avgSchoolDistance  ", cex = 1.5)
plot(latestPrice ~ livingAreaSqFt, data = data, pch = 20, col = "dodgerblue",main = "latestPrice vs. livingAreaSqFt", cex = 1.5)
plot(latestPrice ~ lotSizeSqFt, data = data, pch = 20, col = "dodgerblue",main = "latestPrice vs. lotSizeSqFt", cex = 1.5)
plot(latestPrice ~ numOfBedrooms, data = data, pch = 20, col = "dodgerblue",main = "latestPrice vs. numOfBedrooms", cex = 1.5)
plot(latestPrice ~ numOfBathrooms, data = data, pch = 20, col = "dodgerblue",main = "latestPrice vs. numOfBathrooms", cex = 1.5)
}
dataVisuals(selected_housing_data)
for (x in c('homeType','latestPrice', 'avgSchoolDistance', 'livingAreaSqFt', 'lotSizeSqFt', 'numOfBedrooms', 'numOfBathrooms'))
{
value = selected_housing_data[,x][selected_housing_data[,x] %in% boxplot.stats(selected_housing_data[,x])$out]
selected_housing_data[,x][selected_housing_data[,x] %in% value] = NA
}
# remove all rows with missing data
selected_housing_data = na.omit(selected_housing_data)
dataVisuals(selected_housing_data)
#install.packages('ggmap')
library(ggmap)
library(ggplot2)
# register google maps API key
register_google(key = "AIzaSyAXuwivTHN6rIgi3teuusdz3r8dqNMQQx8")
## Central co-ordinates of the region we are interested in.
central_location = c(mean(selected_housing_data$longitude), mean(selected_housing_data$latitude))
## Get map
austin_map = ggmap(get_googlemap(center = central_location, scale = 1,zoom = 10), extent = "normal")
## Plot Mobility
austin_map + geom_point(
aes(x = selected_housing_data$longitude, y = selected_housing_data$latitude),
data = selected_housing_data,
col = "red",
alpha = 0.4,
size = 0.1
) + xlim(range(selected_housing_data$longitude)) + ylim(range(selected_housing_data$latitude))
set.seed(19870412)
ratio = 0.25
idx  = sample(nrow(selected_housing_data), size = nrow(selected_housing_data)* ratio)
housing_data_train = selected_housing_data[idx, ]
housing_data_test = selected_housing_data[-idx, ]
library(faraway)
options(max.print=1000000)
# This is a helper function to get the top n items from a matrix.
# Adjusted from https://stackoverflow.com/questions/32544566/find-the-largest-values-on-a-matrix-in-r
nlargest = function(m, n=10, sim = TRUE) {
mult = 1;
if (sim) mult = 2
res = order(m, decreasing = TRUE)[seq_len(n) * mult]
pos = arrayInd(res, dim(m), useNames = TRUE)
list(values = m[res],
position = pos)
}
# A correlation cannot be computed for factor variables.So we'll create a copy of
# the data frame without the factor variables to run the collinearity analysis
num_cols = unlist(lapply(housing_data_train, is.numeric))
housing_data_numerical = housing_data_train[ , num_cols]
# Pairs won't work with more than 26 variables
# pairs(housing_data_train[,1:26], col="dodgerblue")
# run cor() and store results on a matrix
(coll_matrix = round(cor(housing_data_numerical),2))
#garageSpaces is not always the same as parkingSpaces
spaces_different = housing_data_train$parkingSpaces != housing_data_train$garageSpaces
# Proportion of observations where parkingSpaces is different than garageSpaces
length(spaces_different[spaces_different==TRUE]) / length(spaces_different)
housing_data_train = subset(housing_data_train, select = -c(garageSpaces))
num_cols = unlist(lapply(housing_data_train, is.numeric))
housing_data_numerical = housing_data_train[ , num_cols]
coll_matrix = round(cor(housing_data_numerical),2)
# Look at the top values from coll_matrix that are different than 1:
nlargest(coll_matrix, n=45)$values[nlargest(coll_matrix, n=45)$values < 1]
library('faraway')
housing_data_model = lm(latestPrice ~ ., data = housing_data_train)
vif = vif(housing_data_model)
vif[which(vif > 5)]
summary(lm(hasGarage ~. -latestPrice, data = housing_data_train))$r.squared
housing_data_model_non_significant = lm(latestPrice ~ .-hasGarage, data = housing_data_train)
vif_non_significant = vif(housing_data_model_non_significant)
vif_non_significant[which(vif_non_significant > 5)]
#Finally, compare both models
(anova_results = anova(housing_data_model, housing_data_model_non_significant))
# As p-value is significant (0.94), we fail to reject and consider remove hasGarage predictor.
housing_data_train = subset(housing_data_train, select = -c(hasGarage))
housing_data_model = lm(latestPrice ~ ., data = housing_data_train)
length(coef(housing_data_model))
## 43 predictors
summary(housing_data_model)$r.squared # 0.5569
summary(housing_data_model)$adj.r.squared # 0.5509
# sqrt(mean((resid(housing_data_model) / (1 - hatvalues(housing_data_model))) ^ 2))
## Additive model AIC and BIC
housing_data_model_aic = step(housing_data_model, direction = "backward", trace = 0)
extractAIC(housing_data_model_aic) # returns both p and AIC
## 29 predictors
summary(housing_data_model_aic)$adj.r.squared
## [1] 0.5515
housing_data_model_bic = step(housing_data_model, direction = "backward", trace = 0, k = log(nrow(housing_data_numerical)))
extractAIC(housing_data_model_bic)  # returns both p and AIC
## 20 predictors
summary(housing_data_model_bic)$adj.r.squared
## [1] 0.5467
## Exhaustive Search
library(leaps)
housing_data_model_leaps = summary(regsubsets(latestPrice ~ ., data = housing_data_train))
housing_data_model_leaps$rss
housing_data_model_leaps$adjr2
housing_data_model_leaps_r2_index = which.max(housing_data_model_leaps$adjr2)  # 0.5167
housing_data_model_leaps$which[housing_data_model_leaps_r2_index, ]
housing_data_model_leaps_best = lm(latestPrice ~ zipcode + propertyTaxRate + hasAssociation + latest_saleyear + yearBuilt + numPriceChanges + numOfWaterfrontFeatures +  avgSchoolSize +
livingAreaSqFt + avgSchoolRating , data = housing_data_train )
summary(housing_data_model_leaps_best)
anova(housing_data_model, housing_data_model_leaps_best) # p-value is <2e-16 # Reject null hypothesis.
# leaps best model can be considered
housing_data_model_interaction = lm(latestPrice ~ (zipcode + propertyTaxRate + hasAssociation + yearBuilt +
numPriceChanges + numOfWaterfrontFeatures + avgSchoolSize + livingAreaSqFt + latest_saleyear + avgSchoolRating)^2, data = housing_data_train)
summary(housing_data_model_interaction)
length(coef(housing_data_model_interaction))## 56 predictors
summary(housing_data_model_interaction)$r.squared # 0.5899
summary(housing_data_model_interaction)$adj.r.squared # 0.5836
anova(housing_data_model, housing_data_model_interaction)[2,"Pr(>F)"]
# 2.438e-49
# Reject Null hypothesis
housing_data_model_interaction_aic = step(housing_data_model_interaction, direction = "backward", trace = 0)
extractAIC(housing_data_model_interaction_aic) # returns both p and AIC
housing_data_model_interaction_aic
# 31 predictors  72174
summary(housing_data_model_interaction_aic)$adj.r.squared
# [1] 0.5844
housing_data_model_interaction_bic = step(housing_data_model_interaction, direction = "backward", trace = 0, k = log(nrow(housing_data_numerical)))
extractAIC(housing_data_model_interaction_bic)  # returns both p and AIC
# 25  predictors 72189
summary(housing_data_model_interaction_bic)$adj.r.squared
# [1] 0.581
diagnostics = function (model){
par(mfrow = c(1, 3))
plot(fitted(model), resid(model), pch = 20,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Fitted vs Residuals",
col = "grey")
abline(h = 0, lwd = 2, col = "orange")
qqnorm(resid(model), pch = 20, main = "QQNorm Plot",col = "grey")
qqline( resid(model),lwd = 2, col =  "orange")
hist(resid(model),main = "Histogram of Residuals",col = "orange",xlab = "Residuals",ylab = "Frequency")
library(lmtest)
bptest(model)
shapiro.test(resid(model))
}
diagnostics(housing_data_model_interaction_aic)
cooksd = cooks.distance(housing_data_model_interaction_aic)
plot(cooksd, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 2*mean(cooksd, na.rm=T), col="black")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>2*mean(cooksd, na.rm=T),names(cooksd),""), col="red")  # add labels
housing_data_model_interaction_aic_without_outliers = lm(latestPrice ~ zipcode + propertyTaxRate + hasAssociation +
yearBuilt + numPriceChanges + numOfWaterfrontFeatures + avgSchoolSize +
livingAreaSqFt + latest_saleyear + avgSchoolRating + zipcode:numPriceChanges +
zipcode:numOfWaterfrontFeatures + zipcode:avgSchoolSize +
zipcode:livingAreaSqFt + propertyTaxRate:hasAssociation +
propertyTaxRate:yearBuilt + propertyTaxRate:avgSchoolSize +
propertyTaxRate:livingAreaSqFt + propertyTaxRate:avgSchoolRating +
hasAssociation:yearBuilt + hasAssociation:numPriceChanges +
hasAssociation:avgSchoolSize + hasAssociation:livingAreaSqFt +
hasAssociation:latest_saleyear + hasAssociation:avgSchoolRating +
yearBuilt:numOfWaterfrontFeatures + yearBuilt:avgSchoolSize +
yearBuilt:latest_saleyear + yearBuilt:avgSchoolRating + numPriceChanges:livingAreaSqFt +
numPriceChanges:latest_saleyear + avgSchoolSize:livingAreaSqFt +
avgSchoolSize:latest_saleyear + avgSchoolSize:avgSchoolRating +
livingAreaSqFt:avgSchoolRating,  data = housing_data_train,  subset = cooksd < 2*mean(cooksd, na.rm=T))
diagnostics(housing_data_model_interaction_aic_without_outliers)
bptest(housing_data_model_interaction_aic_without_outliers)
library(MASS)
boxcox(housing_data_model_interaction_aic_without_outliers, plotit = TRUE, lambda = seq(0, 1, by = 0.05))
housing_data_model_interaction_aic_without_outliers = lm((((latestPrice ^ 0.43) -1)/0.43) ~ zipcode + propertyTaxRate + hasAssociation +
yearBuilt + numPriceChanges + numOfWaterfrontFeatures + avgSchoolSize +
livingAreaSqFt + latest_saleyear + avgSchoolRating + zipcode:numPriceChanges +
zipcode:numOfWaterfrontFeatures + zipcode:avgSchoolSize +
zipcode:livingAreaSqFt + propertyTaxRate:hasAssociation +
propertyTaxRate:yearBuilt + propertyTaxRate:avgSchoolSize +
propertyTaxRate:livingAreaSqFt + propertyTaxRate:avgSchoolRating +
hasAssociation:yearBuilt + hasAssociation:numPriceChanges +
hasAssociation:avgSchoolSize + hasAssociation:livingAreaSqFt +
hasAssociation:latest_saleyear + hasAssociation:avgSchoolRating +
yearBuilt:numOfWaterfrontFeatures + yearBuilt:avgSchoolSize +
yearBuilt:latest_saleyear + yearBuilt:avgSchoolRating + numPriceChanges:livingAreaSqFt +
numPriceChanges:latest_saleyear + avgSchoolSize:livingAreaSqFt +
avgSchoolSize:latest_saleyear + avgSchoolSize:avgSchoolRating +
livingAreaSqFt:avgSchoolRating,  data = housing_data_train,  subset = cooksd < 2*mean(cooksd, na.rm=T))
diagnostics(housing_data_model_interaction_aic_without_outliers)
bptest(housing_data_model_interaction_aic_without_outliers)
